{
	"name": "df_fct_invoice",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_invoice_stage",
						"type": "DatasetReference"
					},
					"name": "sourceInvoiceData"
				},
				{
					"dataset": {
						"referenceName": "ds_fct_invoice",
						"type": "DatasetReference"
					},
					"name": "sourceInvoiceMaxID"
				},
				{
					"dataset": {
						"referenceName": "ds_dimcustomer",
						"type": "DatasetReference"
					},
					"name": "DimCustomer"
				},
				{
					"dataset": {
						"referenceName": "ds_invoice_park_stage",
						"type": "DatasetReference"
					},
					"name": "InvoiceParkStage"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_invoice_park_stage",
						"type": "DatasetReference"
					},
					"name": "LoadIntoParkStage"
				},
				{
					"dataset": {
						"referenceName": "ds_fct_invoice",
						"type": "DatasetReference"
					},
					"name": "sink"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "split1"
				},
				{
					"name": "MergeFromPark"
				},
				{
					"name": "surrogateKey"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "join3"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Job_ID as string (\"59\")",
				"}",
				"source(output(",
				"          INVOICEID as decimal(38,0),",
				"          CUSTOMERID as decimal(38,0),",
				"          INVOICEDATE as date,",
				"          SHIPTO as string,",
				"          SHIPTO_CITY as string,",
				"          SHIPTO_COUNTRY as string,",
				"          SALESPERSONPERSONID as decimal(38,0),",
				"          SALESPERSONNAME as string,",
				"          TOTAL_PRODUCT_CNT as decimal(38,0),",
				"          TOTAL as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceInvoiceData",
				"source(output(",
				"          MAXINVOICESK as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(INVOICE_SK),0) as MaxInvoiceSK FROM FCT_INVOICE',",
				"     format: 'query') ~> sourceInvoiceMaxID",
				"source(output(",
				"          CUSTOMER_SK as decimal(38,0),",
				"          CUSTOMER_ID as decimal(38,0),",
				"          CUSTOMER_NAME as string,",
				"          BILLTO as string,",
				"          JOB_ID as string,",
				"          LOAD_DATE as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> DimCustomer",
				"source(output(",
				"          INVOICEID as decimal(38,0),",
				"          CUSTOMERID as decimal(38,0),",
				"          INVOICEDATE as date,",
				"          SHIPTO as string,",
				"          SHIPTO_CITY as string,",
				"          SHIPTO_COUNTRY as string,",
				"          SALESPERSONPERSONID as decimal(38,0),",
				"          SALESPERSONNAME as string,",
				"          TOTAL_PRODUCT_CNT as decimal(38,0),",
				"          TOTAL as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> InvoiceParkStage",
				"MergeFromPark, DimCustomer join(CUSTOMERID == CUSTOMER_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 split(isNull(CUSTOMERID),",
				"     disjoint: false) ~> split1@(CustomerIDNotFound, CustomerIDFound)",
				"sourceInvoiceData, InvoiceParkStage union(byName: true)~> MergeFromPark",
				"split1@CustomerIDFound keyGenerate(output(RowNum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey",
				"surrogateKey select(mapColumn(",
				"          INVOICEID,",
				"          CUSTOMERID,",
				"          INVOICEDATE,",
				"          SHIPTO,",
				"          SHIPTO_CITY,",
				"          SHIPTO_COUNTRY,",
				"          SALESPERSONPERSONID,",
				"          SALESPERSONNAME,",
				"          TOTAL_PRODUCT_CNT,",
				"          JOB_ID,",
				"          LOAD_DATE,",
				"          TOTAL,",
				"          RowNum",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"join3 derive(INVOICE_SK = MAXINVOICESK + RowNum,",
				"          JOB_ID = $Job_ID,",
				"          LOAD_DATE = currentTimestamp()) ~> derivedColumn1",
				"select1, sourceInvoiceMaxID join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"derivedColumn1 select(mapColumn(",
				"          INVOICEID,",
				"          CUSTOMERID,",
				"          INVOICEDATE,",
				"          SHIPTO,",
				"          SHIPTO_CITY,",
				"          SHIPTO_COUNTRY,",
				"          SALESPERSONPERSONID,",
				"          SALESPERSONNAME,",
				"          TOTAL_PRODUCT_CNT,",
				"          JOB_ID,",
				"          LOAD_DATE,",
				"          TOTAL,",
				"          INVOICE_SK",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"split1@CustomerIDNotFound select(mapColumn(",
				"          INVOICEID,",
				"          CUSTOMERID,",
				"          INVOICEDATE,",
				"          SHIPTO,",
				"          SHIPTO_CITY,",
				"          SHIPTO_COUNTRY,",
				"          SALESPERSONPERSONID,",
				"          SALESPERSONNAME,",
				"          TOTAL_PRODUCT_CNT,",
				"          TOTAL",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          INVOICEID as decimal(38,0),",
				"          CUSTOMERID as decimal(38,0),",
				"          INVOICEDATE as date,",
				"          SHIPTO as string,",
				"          SHIPTO_CITY as string,",
				"          SHIPTO_COUNTRY as string,",
				"          SALESPERSONPERSONID as decimal(38,0),",
				"          SALESPERSONNAME as string,",
				"          TOTAL_PRODUCT_CNT as decimal(38,0),",
				"          TOTAL as double",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          INVOICEID,",
				"          CUSTOMERID,",
				"          INVOICEDATE,",
				"          SHIPTO,",
				"          SHIPTO_CITY,",
				"          SHIPTO_COUNTRY,",
				"          SALESPERSONPERSONID,",
				"          SALESPERSONNAME,",
				"          TOTAL_PRODUCT_CNT,",
				"          TOTAL",
				"     )) ~> LoadIntoParkStage",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          INVOICE_SK as decimal(38,0),",
				"          INVOICEID as decimal(38,0),",
				"          CUSTOMERID as decimal(38,0),",
				"          INVOICEDATE as date,",
				"          SHIPTO as string,",
				"          SHIPTO_CITY as string,",
				"          SHIPTO_COUNTRY as string,",
				"          SALESPERSONPERSONID as decimal(38,0),",
				"          SALESPERSONNAME as string,",
				"          TOTAL_PRODUCT_CNT as decimal(38,0),",
				"          TOTAL as double,",
				"          JOB_ID as string,",
				"          LOAD_DATE as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['INVOICEID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          INVOICE_SK,",
				"          INVOICEID,",
				"          CUSTOMERID,",
				"          INVOICEDATE,",
				"          SHIPTO,",
				"          SHIPTO_CITY,",
				"          SHIPTO_COUNTRY,",
				"          SALESPERSONPERSONID,",
				"          SALESPERSONNAME,",
				"          TOTAL_PRODUCT_CNT,",
				"          TOTAL,",
				"          JOB_ID,",
				"          LOAD_DATE",
				"     )) ~> sink"
			]
		}
	}
}